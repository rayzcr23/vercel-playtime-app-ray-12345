import { GoogleGenerativeAI } from '@google/generative-ai';

export default async function handler(req, res) {
  // --- CORS Headers ---
  res.setHeader('Access-Control-Allow-Credentials', true);
  res.setHeader('Access-Control-Allow-Origin', '*'); // Allow any origin
  res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS,PATCH,DELETE,POST,PUT');
  res.setHeader(
    'Access-Control-Allow-Headers',
    'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version'
  );

  // --- Handle pre-flight OPTIONS request ---
  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  // --- Main Logic ---
  if (req.method === 'POST') {
    try {
      const { image: imageBase64 } = req.body;

      if (!imageBase64) {
        return res.status(400).json({ error: 'No image data provided.' });
      }

      const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
      const model = genAI.getGenerativeModel({ model: 'gemini-1.5-pro-latest' });
      
      const prompt = 'You are an expert AI test grader. Analyze the image and extract two numbers: 1. "incorrect": The number of incorrect answers, usually circled in red at the top (e.g., "-8" or "3"). 2. "total": The highest question number on the entire test page. Provide the output ONLY in a strict JSON format like this: {"incorrect": 8, "total": 34}';
      const imagePart = {
        inlineData: { data: imageBase64, mimeType: 'image/jpeg' },
      };

      const result = await model.generateContent([prompt, imagePart]);
      const responseText = result.response.text();
      const jsonResponse = JSON.parse(responseText.replace(/```json|```/g, '').trim());

      return res.status(200).json(jsonResponse);

    } catch (error) {
      console.error('SERVER_ERROR:', error);
      return res.status(500).json({ error: 'Internal Server Error', details: error.message });
    }
  } else {
    res.setHeader('Allow', ['POST']);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}
